"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_assert_1 = require("node:assert");
const crypto = __importStar(require("crypto"));
const src_1 = require("../src");
describe('MerkleTree tests', () => {
    it('Check constructor equivalence for depth 2 tree', () => {
        const leaves = [crypto.randomBytes(32), crypto.randomBytes(32), crypto.randomBytes(32)];
        const rawLeaves = leaves.concat((0, src_1.emptyNode)(0));
        const merkleTreeRaw = new src_1.MerkleTree(rawLeaves);
        const merkleTreeSparse = src_1.MerkleTree.sparseMerkleTreeFromLeaves(leaves, 2);
        (0, node_assert_1.strict)(merkleTreeRaw.root.equals(merkleTreeSparse.root));
    });
    const TEST_DEPTH = 14;
    it(`Check proofs for 2^${TEST_DEPTH} tree`, () => {
        const leaves = [];
        for (let i = 0; i < 2 ** TEST_DEPTH; i++) {
            leaves.push(crypto.randomBytes(32));
        }
        const merkleTree = new src_1.MerkleTree(leaves);
        // Check proofs
        for (let i = 0; i < leaves.length; i++) {
            const proof = merkleTree.getProof(i);
            (0, node_assert_1.strict)(src_1.MerkleTree.verify(merkleTree.getRoot(), proof));
        }
    });
});
//# sourceMappingURL=merkleTree.test.js.map