"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_assert_1 = require("node:assert");
const anchor_1 = require("@coral-xyz/anchor");
const nodewallet_1 = __importDefault(require("@coral-xyz/anchor/dist/cjs/nodewallet"));
const bytes_1 = require("@coral-xyz/anchor/dist/cjs/utils/bytes");
const web3_js_1 = require("@solana/web3.js");
const bn_js_1 = require("bn.js");
const crypto = __importStar(require("crypto"));
const src_1 = require("../../src");
const utils_1 = require("../utils");
describe('Serde tests', () => {
    let offChainTree;
    let cmtKeypair;
    let payerKeypair;
    let payer;
    let connection;
    let provider;
    const MAX_SIZE = 64;
    const MAX_DEPTH = 14;
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        payerKeypair = web3_js_1.Keypair.generate();
        payer = payerKeypair.publicKey;
        connection = new web3_js_1.Connection('http://127.0.0.1:8899', {
            commitment: 'confirmed',
        });
        const wallet = new nodewallet_1.default(payerKeypair);
        provider = new anchor_1.AnchorProvider(connection, wallet, {
            commitment: connection.commitment,
            skipPreflight: true,
        });
        yield provider.connection.confirmTransaction(yield provider.connection.requestAirdrop(payer, 1e10), 'confirmed');
    }));
    describe('ChangeLogEvent tests', () => {
        let cmt;
        beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
            [cmtKeypair, offChainTree] = yield (0, utils_1.createTreeOnChain)(provider, payerKeypair, 0, {
                maxBufferSize: MAX_SIZE,
                maxDepth: MAX_DEPTH,
            });
            cmt = cmtKeypair.publicKey;
        }));
        it('Can deserialize a ChangeLogEvent', () => __awaiter(void 0, void 0, void 0, function* () {
            const newLeaf = crypto.randomBytes(32);
            const txId = yield (0, utils_1.execute)(provider, [(0, src_1.createAppendIx)(cmt, payer, newLeaf)], [payerKeypair]);
            offChainTree.updateLeaf(0, newLeaf);
            const transaction = yield connection.getTransaction(txId, {
                commitment: 'confirmed',
                maxSupportedTransactionVersion: 2,
            });
            // Get noop program instruction
            const accountKeys = transaction.transaction.message.getAccountKeys();
            const noopInstruction = transaction.meta.innerInstructions[0].instructions[0];
            const programId = accountKeys.get(noopInstruction.programIdIndex);
            if (!programId.equals(src_1.SPL_NOOP_PROGRAM_ID)) {
                throw Error(`Only inner ix should be a noop, but instead is a ${programId.toBase58()}`);
            }
            const cpiData = Buffer.from(bytes_1.bs58.decode(noopInstruction.data));
            const changeLogEvent = (0, src_1.deserializeChangeLogEventV1)(cpiData);
            (0, node_assert_1.strict)(changeLogEvent.treeId.equals(cmt), `Tree id in changeLog differs from expected tree ${cmt.toBase58()}`);
            (0, node_assert_1.strict)(changeLogEvent.index === 0, `ChangeLog should have index 0, but has index ${changeLogEvent.index}`);
            (0, node_assert_1.strict)(new bn_js_1.BN.BN(changeLogEvent.seq).toNumber() === 1, `ChangeLog should have sequence number of 1, but has seq number of ${changeLogEvent.seq.toString()}`);
            // Check that the emitted ChangeLog path matches up with the updated Tree
            let nodeIndex = 0 + (1 << MAX_DEPTH);
            let realTreeNode = offChainTree.leaves[0];
            while (nodeIndex > 0) {
                const clNode = changeLogEvent.path.shift();
                (0, node_assert_1.strict)(nodeIndex === clNode.index, `Expected changeLog index to be ${nodeIndex} but is ${clNode.index}`);
                (0, node_assert_1.strict)(realTreeNode.node.equals(Buffer.from(clNode.node)), `ChangeLog node differs at node index: ${clNode.index}`);
                realTreeNode = realTreeNode.parent;
                nodeIndex = nodeIndex >> 1;
            }
        }));
    });
});
//# sourceMappingURL=changelog.test.js.map