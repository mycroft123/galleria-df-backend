"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.confirmAndLogTx = confirmAndLogTx;
exports.execute = execute;
exports.createTreeOnChain = createTreeOnChain;
exports.createEmptyTreeOnChain = createEmptyTreeOnChain;
exports.prepareTree = prepareTree;
const web3_js_1 = require("@solana/web3.js");
const crypto = __importStar(require("crypto"));
const src_1 = require("../src");
const merkle_tree_1 = require("../src/merkle-tree");
/// Wait for a transaction of a certain id to confirm and optionally log its messages
function confirmAndLogTx(provider_1, txId_1) {
    return __awaiter(this, arguments, void 0, function* (provider, txId, verbose = false) {
        const tx = yield provider.connection.confirmTransaction(txId, 'confirmed');
        if (tx.value.err || verbose) {
            console.log((yield provider.connection.getTransaction(txId, { commitment: 'confirmed' })).meta.logMessages);
        }
        if (tx.value.err) {
            console.log('Transaction failed');
            throw new Error(JSON.stringify(tx.value.err));
        }
    });
}
/// Execute a series of instructions in a txn
function execute(provider_1, instructions_1, signers_1) {
    return __awaiter(this, arguments, void 0, function* (provider, instructions, signers, skipPreflight = false, verbose = false) {
        let tx = new web3_js_1.Transaction();
        instructions.map(ix => {
            tx = tx.add(ix);
        });
        let txid = null;
        try {
            txid = yield provider.sendAndConfirm(tx, signers, {
                skipPreflight,
            });
        }
        catch (e) {
            if (e instanceof web3_js_1.SendTransactionError) {
                console.log('Tx error!', e.logs);
            }
            throw e;
        }
        if (verbose && txid) {
            console.log((yield provider.connection.getTransaction(txid, { commitment: 'confirmed' })).meta.logMessages);
        }
        return txid;
    });
}
function createTreeOnChain(provider_1, payer_1, numLeaves_1, depthSizePair_1) {
    return __awaiter(this, arguments, void 0, function* (provider, payer, numLeaves, depthSizePair, canopyDepth = 0) {
        const cmtKeypair = web3_js_1.Keypair.generate();
        const leaves = Array(2 ** depthSizePair.maxDepth).fill(Buffer.alloc(32));
        for (let i = 0; i < numLeaves; i++) {
            leaves[i] = crypto.randomBytes(32);
        }
        const tree = new merkle_tree_1.MerkleTree(leaves);
        const allocAccountIx = yield (0, src_1.createAllocTreeIx)(provider.connection, cmtKeypair.publicKey, payer.publicKey, depthSizePair, canopyDepth);
        const ixs = [allocAccountIx, (0, src_1.createInitEmptyMerkleTreeIx)(cmtKeypair.publicKey, payer.publicKey, depthSizePair)];
        const txId = yield execute(provider, ixs, [payer, cmtKeypair]);
        if (canopyDepth) {
            yield confirmAndLogTx(provider, txId);
        }
        if (numLeaves) {
            const nonZeroLeaves = leaves.slice(0, numLeaves);
            let appendIxs = nonZeroLeaves.map(leaf => {
                return (0, src_1.createAppendIx)(cmtKeypair.publicKey, payer.publicKey, leaf);
            });
            while (appendIxs.length) {
                const batch = appendIxs.slice(0, 5);
                yield execute(provider, batch, [payer]);
                appendIxs = appendIxs.slice(5);
            }
        }
        return [cmtKeypair, tree];
    });
}
function createEmptyTreeOnChain(provider_1, payer_1, depthSizePair_1) {
    return __awaiter(this, arguments, void 0, function* (provider, payer, depthSizePair, canopyDepth = 0) {
        const cmtKeypair = web3_js_1.Keypair.generate();
        const allocAccountIx = yield (0, src_1.createAllocTreeIx)(provider.connection, cmtKeypair.publicKey, payer.publicKey, depthSizePair, canopyDepth);
        const ixs = [allocAccountIx, (0, src_1.createInitEmptyMerkleTreeIx)(cmtKeypair.publicKey, payer.publicKey, depthSizePair)];
        const txId = yield execute(provider, ixs, [payer, cmtKeypair]);
        yield confirmAndLogTx(provider, txId);
        return cmtKeypair;
    });
}
function prepareTree(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const { provider, payer, depthSizePair, canopyDepth } = args;
        const cmtKeypair = web3_js_1.Keypair.generate();
        const allocAccountIx = yield (0, src_1.createAllocTreeIx)(provider.connection, cmtKeypair.publicKey, payer.publicKey, depthSizePair, canopyDepth);
        const ixs = [allocAccountIx, (0, src_1.prepareTreeIx)(cmtKeypair.publicKey, payer.publicKey, depthSizePair)];
        const txId = yield execute(provider, ixs, [payer, cmtKeypair]);
        yield confirmAndLogTx(provider, txId);
        return cmtKeypair;
    });
}
//# sourceMappingURL=utils.js.map