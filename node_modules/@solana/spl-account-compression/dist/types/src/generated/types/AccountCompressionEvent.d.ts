/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as beet from '@metaplex-foundation/beet';
import { ApplicationDataEvent } from './ApplicationDataEvent';
import { ChangeLogEvent } from './ChangeLogEvent';
/**
 * This type is used to derive the {@link AccountCompressionEvent} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link AccountCompressionEvent} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type AccountCompressionEventRecord = {
    ApplicationData: {
        fields: [ApplicationDataEvent];
    };
    ChangeLog: {
        fields: [ChangeLogEvent];
    };
};
/**
 * Union type respresenting the AccountCompressionEvent data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isAccountCompressionEvent*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type AccountCompressionEvent = beet.DataEnumKeyAsKind<AccountCompressionEventRecord>;
export declare const isAccountCompressionEventChangeLog: (x: AccountCompressionEvent) => x is AccountCompressionEvent & {
    __kind: "ChangeLog";
};
export declare const isAccountCompressionEventApplicationData: (x: AccountCompressionEvent) => x is AccountCompressionEvent & {
    __kind: "ApplicationData";
};
/**
 * @category userTypes
 * @category generated
 */
export declare const accountCompressionEventBeet: beet.FixableBeet<AccountCompressionEvent, AccountCompressionEvent>;
//# sourceMappingURL=AccountCompressionEvent.d.ts.map