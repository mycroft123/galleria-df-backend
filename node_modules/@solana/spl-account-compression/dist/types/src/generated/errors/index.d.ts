/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
type ErrorWithCode = Error & {
    code: number;
};
type MaybeErrorWithCode = ErrorWithCode | null | undefined;
/**
 * IncorrectLeafLength: 'Incorrect leaf length. Expected vec of 32 bytes'
 *
 * @category Errors
 * @category generated
 */
export declare class IncorrectLeafLengthError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * ConcurrentMerkleTreeError: 'Concurrent merkle tree error'
 *
 * @category Errors
 * @category generated
 */
export declare class ConcurrentMerkleTreeErrorError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * ZeroCopyError: 'Issue zero copying concurrent merkle tree data'
 *
 * @category Errors
 * @category generated
 */
export declare class ZeroCopyErrorError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * ConcurrentMerkleTreeConstantsError: 'An unsupported max depth or max buffer size constant was provided'
 *
 * @category Errors
 * @category generated
 */
export declare class ConcurrentMerkleTreeConstantsErrorError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * CanopyLengthMismatch: 'Expected a different byte length for the merkle tree canopy'
 *
 * @category Errors
 * @category generated
 */
export declare class CanopyLengthMismatchError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * IncorrectAuthority: 'Provided authority does not match expected tree authority'
 *
 * @category Errors
 * @category generated
 */
export declare class IncorrectAuthorityError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * IncorrectAccountOwner: 'Account is owned by a different program, expected it to be owned by this program'
 *
 * @category Errors
 * @category generated
 */
export declare class IncorrectAccountOwnerError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * IncorrectAccountType: 'Account provided has incorrect account type'
 *
 * @category Errors
 * @category generated
 */
export declare class IncorrectAccountTypeError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * LeafIndexOutOfBounds: 'Leaf index of concurrent merkle tree is out of bounds'
 *
 * @category Errors
 * @category generated
 */
export declare class LeafIndexOutOfBoundsError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * CanopyNotAllocated: 'Tree was initialized without allocating space for the canopy'
 *
 * @category Errors
 * @category generated
 */
export declare class CanopyNotAllocatedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * TreeAlreadyInitialized: 'Tree was already initialized'
 *
 * @category Errors
 * @category generated
 */
export declare class TreeAlreadyInitializedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * BatchNotInitialized: 'Tree header was not initialized for batch processing'
 *
 * @category Errors
 * @category generated
 */
export declare class BatchNotInitializedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * CanopyRootMismatch: 'Canopy root does not match the root of the tree'
 *
 * @category Errors
 * @category generated
 */
export declare class CanopyRootMismatchError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * CanopyRightmostLeafMismatch: 'Canopy contains nodes to the right of the rightmost leaf of the tree'
 *
 * @category Errors
 * @category generated
 */
export declare class CanopyRightmostLeafMismatchError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export declare function errorFromCode(code: number): MaybeErrorWithCode;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export declare function errorFromName(name: string): MaybeErrorWithCode;
export {};
//# sourceMappingURL=index.d.ts.map